from typing import Dict, Any
from quart import current_app
from config import CONFIG_CHAT_APPROACH, CONFIG_CHAT_HISTORY_BROWSER_ENABLED, CONFIG_CHAT_VISION_APPROACH
from services.sessionservice import SessionService
from exceptions.customexceptions import InternalServerError

class ChatService:
    def __init__(self, request_json: Dict[str, Any], auth_claims: Dict[str, Any]):
        """
        Initializes a ChatService instance to handle chat request processing.
        
        Args:
            request_json (Dict[str, Any]): JSON request containing the chat messages and context.
            auth_claims (Dict[str, Any]): Authentication claims used for verifying the user.

        The constructor sets up the context, session manager, and determines the configuration 
        key to use for selecting the appropriate chat approach based on whether GPT-4V is enabled.
        """
        self.request_json = request_json
        self.auth_claims = auth_claims
        self.context = request_json.get("context", {})
        self.context["auth_claims"] = auth_claims
        self.use_gpt4v = self.context.get("overrides", {}).get("use_gpt4v", False)
        self.config_key = CONFIG_CHAT_VISION_APPROACH if self.use_gpt4v else CONFIG_CHAT_APPROACH
        self.approach = None
        self.session_state = None
        self.session_manager = SessionService(request_json, current_app.config[CONFIG_CHAT_HISTORY_BROWSER_ENABLED])

    def _get_session_state_and_approach(self):
        """
        Retrieves the session state and selects the appropriate chat approach.

        This method is responsible for determining the correct chat processing approach 
        (GPT-4V or regular approach) and initializing the session state using the 
        SessionService instance. It retrieves configuration details from the Quart 
        application context.
        
        Raises:
            InternalServerError: If the configuration for the chat approach is missing.
        
        Returns:
            list: A list containing the context, selected chat approach, and session state.
        """
        if self.config_key not in current_app.config:
            raise InternalServerError("Configuration missing for chat approach.")
        self.approach = current_app.config[self.config_key]
        self.session_state = self.session_manager.get_session_state()
        return [self.context, self.approach, self.session_state]

    async def process_chat_request(self) -> Dict[str, Any]:
        """
        Processes a standard chat request and returns the response.

        This method handles a standard chat interaction, utilizing the selected chat 
        approach to process the incoming messages. It prepares the context, retrieves 
        session state via the SessionService, and invokes the approach's `run` method 
        to handle the chat logic.
        
        Returns:
            Dict[str, Any]: The response generated by the chat approach, containing the 
            output of the conversation.
        """
        self._get_session_state_and_approach()
        return await self.approach.run(self.request_json["messages"], context=self.context, session_state=self.session_state)

    async def process_chat_stream_request(self) -> Dict[str, Any]:
        """
        Processes a chat request with streaming and returns the response.

        This method is similar to `process_chat_request`, but it handles chat interactions 
        that require streaming responses. It prepares the context, retrieves session 
        state via the SessionService, and invokes the chat approach's `run_stream` method 
        to process the chat messages in a stream-based manner.
        
        Returns:
            Dict[str, Any]: The streaming response generated by the chat approach, allowing 
            for continuous interaction between the user and the chat service.
        """
        self._get_session_state_and_approach()
        result = await self.approach.run_stream(self.request_json["messages"], context=self.context, session_state=self.session_state)
        return result
